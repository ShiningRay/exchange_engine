#!/usr/bin/env ruby

require 'bundler/setup'
require 'sinatra'
require 'connection_pool'
require 'redis'
require 'json'
require 'logger'
require 'yaml'
require 'securerandom'
require_relative '../lib/order_book'
require_relative '../lib/order_processor'

# 配置日志
def setup_logger
  logger = Logger.new(STDOUT)
  logger.level = ENV['LOG_LEVEL'] || Logger::INFO
  logger.formatter = proc do |severity, datetime, progname, msg|
    "[#{datetime}] #{severity} [#{Thread.current.object_id}] - #{msg}\n"
  end
  logger
end

LOGGER = setup_logger

# 加载配置
def load_config
  env = ENV['RACK_ENV'] || 'development'
  LOGGER.info("Loading configuration for environment: #{env}")
  
  config_file = File.join(File.dirname(__FILE__), '..', 'config', 'config.yml')
  if File.exist?(config_file)
    YAML.load_file(config_file)[env]
  else
    LOGGER.warn("Configuration file not found, using defaults")
    {
      'redis_url' => 'redis://localhost:6379/0',
      'port' => 3000,
      'trading_pairs' => ['BTCUSDT', 'ETHUSDT'],
      'log_level' => 'info'
    }
  end
end

CONFIG = load_config

# 配置Sinatra
set :port, CONFIG['port']
set :bind, '0.0.0.0'
LOGGER.info("Server configured to run on port #{CONFIG['port']}")

# 初始化Redis连接池
REDIS_POOL = ConnectionPool.new(size: 5) do
  LOGGER.info("Initializing Redis connection to #{CONFIG['redis_url']}")
  Redis.new(url: CONFIG['redis_url'])
end

# 初始化交易对
TRADING_PAIRS = CONFIG['trading_pairs']
REDIS_POOL.with do |conn|
  LOGGER.info("Initializing trading pairs: #{TRADING_PAIRS.join(', ')}")
  conn.del('trading_pairs')
  TRADING_PAIRS.each do |pair|
    conn.sadd('trading_pairs', pair)
  end
end

# 启动订单处理器
order_processor = ExchangeEngine::OrderProcessor.new(REDIS_POOL, LOGGER)
Thread.new do
  LOGGER.info("Starting order processor thread")
  order_processor.start
end

# 错误处理
error do
  err = env['sinatra.error']
  LOGGER.error("Unexpected error: #{err.message}")
  LOGGER.error(err.backtrace.join("\n"))
  status 500
  { error: 'Internal Server Error', message: err.message }.to_json
end

# 健康检查
get '/health' do
  content_type :json
  LOGGER.debug("Health check requested")
  { 
    status: 'ok', 
    timestamp: Time.now.to_i,
    trading_pairs: TRADING_PAIRS,
    redis_connected: test_redis_connection
  }.to_json
end

# 添加限价订单
post '/api/v1/orders' do
  content_type :json
  LOGGER.info("Received order creation request")
  
  begin
    payload = JSON.parse(request.body.read, symbolize_names: true)
    LOGGER.debug("Order payload: #{payload.inspect}")
    
    # 参数验证
    required_params = [:trading_pair, :side, :price, :amount]
    missing_params = required_params.select { |p| !payload[p] }
    
    if !missing_params.empty?
      LOGGER.warn("Missing parameters: #{missing_params.join(', ')}")
      status 400
      return { error: "Missing required parameters: #{missing_params.join(', ')}" }.to_json
    end
    
    if !TRADING_PAIRS.include?(payload[:trading_pair])
      LOGGER.warn("Invalid trading pair: #{payload[:trading_pair]}")
      status 400
      return { error: "Invalid trading pair. Supported pairs: #{TRADING_PAIRS.join(', ')}" }.to_json
    end
    
    order = {
      'id' => "order_#{Time.now.to_i}_#{SecureRandom.hex(4)}",
      'trading_pair' => payload[:trading_pair],
      'side' => payload[:side],
      'price' => payload[:price].to_f,
      'amount' => payload[:amount].to_f,
      'timestamp' => Time.now.to_i,
      'type' => 'limit'
    }
    
    LOGGER.info("Queueing order: #{order['id']}")
    REDIS_POOL.with do |conn|
      conn.lpush('pending_orders', Oj.dump(order))
    end
    
    status 202 # Accepted
    { order_id: order['id'] }.to_json
  rescue JSON::ParserError => e
    LOGGER.error("Invalid JSON in request: #{e.message}")
    status 400
    { error: 'Invalid JSON format' }.to_json
  rescue => e
    LOGGER.error("Error creating order: #{e.message}")
    LOGGER.error(e.backtrace.join("\n"))
    status 500
    { error: e.message }.to_json
  end
end

# 取消订单
delete '/api/v1/orders/:order_id' do |order_id|
  content_type :json
  LOGGER.info("Received cancellation request for order: #{order_id}")
  
  trading_pair = params[:trading_pair]
  
  if !trading_pair || !TRADING_PAIRS.include?(trading_pair)
    LOGGER.warn("Invalid trading pair: #{trading_pair}")
    status 400
    return { error: "Invalid or missing trading pair parameter" }.to_json
  end
  
  begin
    cancel_order = {
      'id' => order_id,
      'trading_pair' => trading_pair,
      'timestamp' => Time.now.to_i,
      'type' => 'cancel'
    }

    LOGGER.info("Queueing cancel order: #{order_id}")
    REDIS_POOL.with do |conn|
      conn.lpush('pending_orders', Oj.dump(cancel_order))
    end

    status 202 # Accepted
    { status: 'accepted', order_id: order_id }.to_json
  rescue => e
    LOGGER.error("Error cancelling order #{order_id}: #{e.message}")
    LOGGER.error(e.backtrace.join("\n"))
    status 500
    { error: e.message }.to_json
  end
end

# 查询订单状态
get '/api/v1/orders/:order_id' do |order_id|
  content_type :json
  LOGGER.info("Received status request for order: #{order_id}")
  
  trading_pair = params[:trading_pair]
  
  if !trading_pair || !TRADING_PAIRS.include?(trading_pair)
    LOGGER.warn("Invalid trading pair: #{trading_pair}")
    status 400
    return { error: "Invalid or missing trading pair parameter" }.to_json
  end
  
  begin
    REDIS_POOL.with do |conn|
      order = conn.hgetall("order:#{trading_pair}:#{order_id}")
      if order.empty?
        LOGGER.warn("Order #{order_id} not found")
        status 404
        { error: 'Order not found' }.to_json
      else
        LOGGER.info("Order #{order_id} found: #{order.inspect}")
        status 200
        order.to_json
      end
    end
  rescue => e
    LOGGER.error("Error querying order #{order_id}: #{e.message}")
    LOGGER.error(e.backtrace.join("\n"))
    status 500
    { error: e.message }.to_json
  end
end

# 获取失败的订单
get '/api/v1/failed_orders' do
  content_type :json
  LOGGER.info("Fetching failed orders")
  
  begin
    REDIS_POOL.with do |conn|
      failed_orders = conn.lrange('failed_orders', 0, 49).map { |o| Oj.load(o) }
      status 200
      failed_orders.to_json
    end
  rescue => e
    LOGGER.error("Error fetching failed orders: #{e.message}")
    status 500
    { error: e.message }.to_json
  end
end

def test_redis_connection
  REDIS_POOL.with do |conn|
    conn.ping == 'PONG'
  end
rescue => e
  LOGGER.error("Redis connection test failed: #{e.message}")
  false
end

LOGGER.info("Exchange Engine starting on port #{settings.port}...")
LOGGER.info("Supported trading pairs: #{TRADING_PAIRS.join(', ')}")
